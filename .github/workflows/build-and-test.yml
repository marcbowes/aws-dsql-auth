name: Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-15]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.20.x'

    - name: Install Dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
        
        # Verify OpenSSL installation
        pkg-config --modversion openssl
        pkg-config --libs openssl
        pkg-config --cflags openssl
        
        # Export pkgconfig variables that will be used during build
        echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV

    - name: Install Dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install openssl@3 pkg-config
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

    - name: Cache Build Directory
      uses: actions/cache@v3
      with:
        path: |
          build
          aws-sdk/*/build
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/*.c', '**/*.h', 'CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Build (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        # Verify OpenSSL can be found with pkg-config
        pkg-config --modversion openssl
        pkg-config --libs openssl
        pkg-config --cflags openssl
        
        # Get OpenSSL library and include paths from pkg-config
        OPENSSL_LIBS=$(pkg-config --libs openssl)
        OPENSSL_CFLAGS=$(pkg-config --cflags openssl)
        
        # Export for CMake
        export OPENSSL_ROOT_DIR=/usr
        export OPENSSL_INCLUDE_DIR=/usr/include/openssl
        export OPENSSL_CRYPTO_LIBRARY=/usr/lib/x86_64-linux-gnu/libcrypto.so
        export OPENSSL_SSL_LIBRARY=/usr/lib/x86_64-linux-gnu/libssl.so
        
        # Create build directory
        mkdir -p build
        cd build
        
        # Run CMake with pkg-config environment
        CMAKE_PREFIX_PATH=/usr \
        PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig \
        cmake -DIN_SOURCE_BUILD=ON \
              -DOPENSSL_ROOT_DIR=/usr \
              -DCMAKE_PREFIX_PATH=/usr \
              -DCMAKE_C_FLAGS="$(pkg-config --cflags openssl)" \
              -DCMAKE_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu \
              -DCMAKE_FIND_LIBRARY_SUFFIXES=".so" \
              -DCMAKE_VERBOSE_MAKEFILE=ON ..
        
        make -j4 VERBOSE=1

    - name: Build (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        chmod +x ./build.sh
        ./build.sh

    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure
