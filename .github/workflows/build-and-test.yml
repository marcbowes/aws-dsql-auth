name: Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-15]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.20.x'

    - name: Install Dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev pkg-config
        # Set openssl environment variables for Ubuntu
        echo "OPENSSL_ROOT_DIR=/usr" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
        echo "OPENSSL_CRYPTO_LIBRARY=/usr/lib/x86_64-linux-gnu/libcrypto.so" >> $GITHUB_ENV
        echo "OPENSSL_SSL_LIBRARY=/usr/lib/x86_64-linux-gnu/libssl.so" >> $GITHUB_ENV

    - name: Install Dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install openssl@3
        echo 'export OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)' >> $GITHUB_ENV
        echo 'export LDFLAGS="-L$(brew --prefix openssl@3)/lib"' >> $GITHUB_ENV
        echo 'export CPPFLAGS="-I$(brew --prefix openssl@3)/include"' >> $GITHUB_ENV

    - name: Cache Build Directory
      uses: actions/cache@v3
      with:
        path: |
          build
          aws-sdk/*/build
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/*.c', '**/*.h', 'CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Build
      run: |
        chmod +x ./build.sh
        mkdir -p build
        cd build
        # Pass OpenSSL paths directly to CMake
        cmake -DIN_SOURCE_BUILD=ON -DOPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR -DOPENSSL_INCLUDE_DIR=$OPENSSL_INCLUDE_DIR ..
        make -j4
        cd ..

    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure
