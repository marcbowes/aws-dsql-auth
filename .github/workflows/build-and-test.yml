name: Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-15]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.20.x'

    - name: Install Dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config
        # Explicitly install OpenSSL development package
        sudo apt-get install -y libssl-dev
        # Get OpenSSL information from pkg-config
        export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig
        echo "OpenSSL pkg-config information:"
        pkg-config --libs --cflags openssl || echo "pkg-config failed for openssl"
        
        # Set detailed OpenSSL paths
        echo "OPENSSL_ROOT_DIR=/usr" >> $GITHUB_ENV
        echo "CMAKE_PREFIX_PATH=/usr" >> $GITHUB_ENV
        
        # Verify OpenSSL files exist
        ls -la /usr/lib/x86_64-linux-gnu/libssl.so* || echo "libssl.so not found"
        ls -la /usr/lib/x86_64-linux-gnu/libcrypto.so* || echo "libcrypto.so not found"
        ls -la /usr/include/openssl || echo "OpenSSL headers not found"

    - name: Install Dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install openssl@3
        echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix openssl@3)/include" >> $GITHUB_ENV

    - name: Cache Build Directory
      uses: actions/cache@v3
      with:
        path: |
          build
          aws-sdk/*/build
        key: ${{ runner.os }}-cmake-${{ hashFiles('**/*.c', '**/*.h', 'CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Build (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        # Create patched Find module for OpenSSL
        mkdir -p cmake_modules
        cat > cmake_modules/FindOpenSSL.cmake << 'EOL'
        # Custom FindOpenSSL.cmake for GitHub Actions
        find_path(OPENSSL_INCLUDE_DIR
          NAMES openssl/ssl.h
          PATHS /usr/include
          NO_DEFAULT_PATH
        )
        
        find_library(OPENSSL_SSL_LIBRARY
          NAMES ssl libssl
          PATHS /usr/lib/x86_64-linux-gnu
          NO_DEFAULT_PATH
        )
        
        find_library(OPENSSL_CRYPTO_LIBRARY
          NAMES crypto libcrypto
          PATHS /usr/lib/x86_64-linux-gnu
          NO_DEFAULT_PATH
        )
        
        if (OPENSSL_INCLUDE_DIR AND OPENSSL_SSL_LIBRARY AND OPENSSL_CRYPTO_LIBRARY)
          set(OPENSSL_FOUND TRUE)
          message(STATUS "Found OpenSSL:")
          message(STATUS "  includes: ${OPENSSL_INCLUDE_DIR}")
          message(STATUS "  libraries: ${OPENSSL_SSL_LIBRARY}, ${OPENSSL_CRYPTO_LIBRARY}")
        else()
          message(FATAL_ERROR "Could not find OpenSSL")
        endif()
        EOL
        
        # Configure and build
        mkdir -p build
        cd build
        cmake -DIN_SOURCE_BUILD=ON \
              -DCMAKE_MODULE_PATH=$(pwd)/../cmake_modules \
              -DOPENSSL_USE_STATIC_LIBS=FALSE \
              -DOPENSSL_ROOT_DIR=/usr \
              -DOPENSSL_INCLUDE_DIR=/usr/include \
              -DOPENSSL_CRYPTO_LIBRARY=/usr/lib/x86_64-linux-gnu/libcrypto.so \
              -DOPENSSL_SSL_LIBRARY=/usr/lib/x86_64-linux-gnu/libssl.so \
              -DCMAKE_VERBOSE_MAKEFILE=ON ..
        
        make -j4

    - name: Build (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        chmod +x ./build.sh
        ./build.sh

    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure
